package wasi:spi@0.2.0;

interface general {
    variant spi-error {
        /// SPI controller hardware fault
        hardware-fault,

        /// The full-bus/bus + CS pin is already used by another process
        already-in-use,

        /// Policy does not allow this full-bus/bus + CS pin to be used at all
        not-allowed,

        /// Read before write on controller, write before read on peripheral
        operation-not-supported,

        /// The peripheral receive buffer was overrun (embedded-hal)
        overrun,

        /// Multiple devices on the SPI bus are trying to drive the chip select pin (embedded-hal)
        mode-fault,

        /// Received data does not conform to the peripheral configuration (embedded-hal)
        frame-format,

        /// An error occurred while asserting or deasserting the Chip Select pin (embedded-hal)
        chip-select-fault,

        /// When the supplied amount of data is not a multiple of the wordsize (can be more but not less, the biggest multiple will be transferred)
        wrong-amount-of-data,

        /// The peripheral itself is not enabled so cannot use 
        not-enabled,
	
	/// Gets returned when a function on an invalidated resource gets called 
	resource-invalidated,

        /// Unspecified error, error message might give hints but not guaranteed
        other(string)
    }

    /// Enum type that specifies the SPI modes
    /// The modes specifies when datatransfer happens (rising or falling edge) and if datatransfer happens immediately when CS becomes active or after 1 clockpulse
    /// CS active means high or low depending on the configuration of the pin
    enum spi-mode {
        /// Falling CLK and when CS activates
        spi0,

        /// Rising CLK
        spi1,

        /// Rising CLK and when CS activates
        spi2,

        /// Falling CLK
        spi3
    }

    /// SPI configuration
    record spi-config {
        /// Frequency of the clock signal, the controller will configure a frequency lower than or equal to the value
        frequency: u64,

        /// Delay between selecting the peripheral and starting the transfer, important for some ADC's and DAC's
        transmission-delay: u64,

        /// Size of the datawords that get transmitted, common values are 8, 12 and 16 bits
        /// Maybe u64 is overkill
        word-size: u64,

        /// The SPI mode
        mode: spi-mode,
    }

    /// Operation variants that can be used to chain operations in a transaction
    variant operation {
        read,
        write(list<u8>),
        transfer(list<u8>),
        delay(u64),
    }
}

interface controller {
    use general.{spi-mode, spi-config, operation, spi-error};

    /// SPI controller resource
    /// An SPI controller is a combination of an SPI bus together with a CS pin, multiple controllers on the same bus can exist
    resource spi-controller {
        /// Constructor function to get an spi-controller resource
        get: static func(bus: string, cs-pin: string, config: spi-config) -> result<spi-controller, spi-error>;

        /// Returns the configuration of the SPI bus + CS pin this resource is tied to
        get-config: func() -> spi-config;

        // Maybe change this to string because some microcontrollers use other names than SPI0, SPI1, ...
        // Examples are NXP i.MX RT Series, ESP32
        // A function that maps the SPI label to a number can be made to help with this problem

        /// Returns the bus number
        get-bus: func() -> u8;

        // Maybe depend on wasi:gpio and give a digital-in-pin as argument to the constructor

        /// Returns the CS pin label
        get-cs-pin: func() -> string;

        /// Manually select the peripheral
        select-chip: func() -> result<_, spi-error>;

        /// Manually deselect the peripheral
        deselect-chip: func() -> result<_, spi-error>;

        /// Write the the peripheral, automatically turning on and off the CS pin unless it is manually turned on
        write: func(write: list<u8>) -> result<_, spi-error>;

        /// Read from the peripheral, automatically turning on and off the CS pin unless it is manually turned on
        read: func() -> result<list<u8>, spi-error>;

        /// Write to and read from the peripheral, manually turning on and off the CS pin unless it is manually turned on
        transfer: func(write: list<u8>) -> result<list<u8>, spi-error>;

        /// Execute the list of operations in order, automatically turning on the CS pin on start and turning it off on end unless it is manually turned on
        /// The return type will have the same structure as the operations, consisting out of a list of write/read results or SPI errors
        /// The write/read results will respectively be the unit type (_) or a list of u8 integers representing the response of the peripheral
        /// Example: transaction: write, read, write, read
        /// If on the 2nd write an error occurs the result of the transaction will be as follows: _, list<u8>, spi-error
        /// This makes debugging easier
        transaction: func(operations: list<operation>) -> list<result<option<list<u8>>, spi-error>>;
    }    
}

interface bus {
    use general.{spi-mode, spi-config, operation, spi-error};

    /// SPI bus resource
    /// An SPI bus is full access to the physical MOSI/MISO/CLK pins without sharing it with other processes
    /// To talk to peripheral devices, their CS pins will need to be activated manually by means of for example wasi:gpio digital-out-pin resources
    resource spi-bus {
        /// Constructor function to get an spi-bus resource
        get: static func(bus: string, config: spi-config) -> result<spi-bus, spi-error>;

        /// Returns the configuration of the SPI bus + CS pin this resource is tied to
        get-config: func() -> spi-config;

        /// Returns the bus number
        get-bus: func() -> u8;

        /// Write to the bus
        write: func(write: list<u8>) -> result;

        /// Read from the bus
        read: func() -> result<list<u8>>;

        /// Write and read from the bus
        transfer: func(write: list<u8>) -> result<list<u8>>;

        /// Execute a list of operations in order
        /// The return type will have the same structure as the operations, consisting out of a list of write/read results or SPI errors
        /// The write/read results will respectively be the unit type (_) or a list of u8 integers representing the response of the peripheral
        /// Example: transaction: write, read, write, read
        /// If on the 2nd write an error occurs the result of the transaction will be as follows: _, list<u8>, spi-error
        /// This makes debugging easier
        transaction: func(operations: list<operation>) -> list<result<option<list<u8>>, spi-error>>;
    }
}

interface peripheral {
    use general.{spi-config, spi-error};

    resource spi-peripheral-read {
        get-value: func() -> bool;
    }

    /// SPI peripheral resource
    /// An SPI peripheral is a device that reacts to its CS becoming active and responds to incoming bits by sending back bits to the controller device
    resource spi-peripheral {
        /// Constructor function to be come an SPI peripheral
        become: static func(bus: string, config: spi-config) -> result<spi-peripheral, spi-error>;

        /// Checks if the peripheral is selected, after this function returns true, the read function 
        enabled: func() -> bool;

        /// If there can be read, this function returns an spi-peripheral-read resource that has 2 functions
        /// It provides the peripheral with the bit that was read
        /// It needs to be passed to the write function to write a bit back, this prevents write without read
        read: func() -> result<option<spi-peripheral-read>, spi-error>;
        
        /// The peripheral write function that demands a read to have happened first
        write: func(read: spi-peripheral-read, bit: bool) -> result<_, spi-error>;
    }
}
